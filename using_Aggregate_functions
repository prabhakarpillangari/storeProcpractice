--Create a stored procedure that takes a department number as a parameter and returns the total salary for that department



--alter proc display_dept_sal_sum
--(
--@deptno int
--)
--as 
--begin
--(
--select sum(sal),deptno from emp 
--where deptno= @deptno
--group by deptno
--)
--end

--exec [dbo].[display_dept_sal_sum] 30

--Write a stored procedure that takes a job title as input and returns the average salary for that job.

--create proc display_Job_Avg_Sal(
--@job varchar(100)
--)
--as 
--begin
--(
--select avg(Sal),job from emp
--where job=@job
--group by job
--)
--end

--exec display_Job_Avg_Sal 'manager'

select * from emp

--Create a stored procedure that takes a department number as input and returns the maximum and minimum salary in that department.
--create proc display_dept_max_min_sal
--(
--@deptno int
--)
--as 
--begin
--(
--select max(sal), min(sal) from emp 
--where deptno=@deptno
--group by deptno
--)
--end

--exec display_dept_max_min_sal 30


--Write a stored procedure that accepts a manager ID and returns the total number of employees reporting to that manager.


--alter proc display_TotalEmp_By_managerID
--(
--@mgr int
--)
--as 
--begin
--(
--select count(*) from emp 
--where mgr=@mgr
--group by mgr

--)
--end


--exec display_TotalEmp_By_managerID 7566

--select ename from emp 
--where mgr=7788
--group by mgr

--Write a stored procedure that takes a department number and returns the count of employees for each job in that department.

--create proc Count_of_Emp_EachDept
--(
--@deptno int
--)
--as 
--begin
--(
--select count(*), deptno from emp 
--where deptno=@deptno
--group by deptno
--)
--end

--exec Count_of_Emp_EachDept 30

--Create a stored procedure that accepts a salary threshold and returns departments where the average salary is greater than that threshold.


--create proc AVg_sal_Dept_greater_threshold
--(
--@sal int
--)
--as
--begin
--(

--select deptno, Avg(sal), 
--case 
--	when Avg(Sal)>@sal then 'Above threshold'
--	else 'below or equal to Threshold'
--End status
--from emp
--group by deptno
--)
--end;

--exec AVg_sal_Dept_greater_threshold 1500

--Write a stored procedure that takes a department location as a parameter and lists all employees working in that location



--alter proc display_Emp_using_LOC
--(
--@loc varchar(100)
--)
--as
--begin
--(
--select ename from emp e  inner join dept d
--on e.deptno=d.deptno
--where d.loc= @loc
--)
--end

--select * from dept
--exec display_Emp_using_LOC 'CHICAGO'

--Create a stored procedure that accepts a department name and returns all employees in that department.

--create proc display_Emp_using_DepName
--(
--@dname varchar(100)
--)
--as
--begin
--(
--select ename from emp e  inner join dept d
--on e.deptno=d.deptno
--where d.dname= @dname
--)
--end

--exec display_Emp_using_DepName 'ACCOUNTING'

--Write a stored procedure that takes a department number and shows the department name along with the names of employees in that department.



--create proc display_DeptName_EmpName_using_DeptNO
--(
--@deptno int
--)
--as
--begin
--(
--select d.dname,e.ename from emp e
--inner join  dept d on d.deptno=e.deptno
--where d.deptno = @deptno
--)
--end

--exec display_DeptName_EmpName_using_DeptNO 10

--Create a stored procedure that takes a job title and returns the employee name, department name, and location


--create proc Display_EmpDetails_using_job
--(
--@job varchar(100)
--)
--as
--begin
--(
--select e.ename,d.dname,d.loc from emp e 
--inner join dept d on d.deptno=e.deptno
--where e.job=@job
--)
--end;

--exec Display_EmpDetails_using_job 'SALESMAN'
--select * from emp
